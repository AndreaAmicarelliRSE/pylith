#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Glossary"

\end_inset

Glossary
\end_layout

\begin_layout Section
Pyre
\end_layout

\begin_layout Description
component Basic building block of a Pyre application.
 A component may be built-up from smaller building blocks, where simple
 data types are called properties and data structures and objects are called
 facilities.
 In general a component is a specific implementation of the functionality
 of a facility.
 For example, SimpleDB is a specific implementation of the spatial database
 facility.
 A component is generally composed of a Python object and a C++ object,
 although either one may be missing.
 We nearly always use the naming convention such that for an object called
 Foo the Python object is in file Foo.py, the C++ class definition is in
 Foo.hh, inline C++ functions are in foo.icc, the C++ class implementation
 is in Foo.cc, and the SWIG interface file that glues the C++ and Python
 code together is in Foo.i.
\end_layout

\begin_layout Description
facility Complex data type (object or data structure) building block of
 a component.
 See component.
\end_layout

\begin_layout Description
property Simple data type (string, integer, real number, or boolean value)
 parameter for a component.
\end_layout

\begin_layout Section
DMPlex
\end_layout

\begin_layout Description
DMPlex The plex construction is a representation of the topology of the
 finite element mesh based upon a covering relation.
 For example, segments are covered by their endpoints, faces by their bounding
 edges, etc.
 Geometry is absent from the plex, and is represented instead by a  field
 with the coordinates of the vertices.
 Meshes can also be understood as directed acyclic graphs, where we call
 the constituents points and arrows.
\end_layout

\begin_layout Description
mesh A finite element mesh, used to partition space and provide support
 for the basis functions.
\end_layout

\begin_layout Description
cell The highest dimensional elements of a mesh, or mesh entities of codimension
 zero.
\end_layout

\begin_layout Description
vertex The zero dimensional mesh elements.
\end_layout

\begin_layout Description
face Mesh elements that separate cells, or mesh entities of codimension
 one.
\end_layout

\begin_layout Description
field A parallel section which can be completed, or made consistent, across
 process boundaries.
 These are used to represent continuum fields.
\end_layout

\begin_layout Description
section These objects associate values in vectors to points (vertices, 
 edges, faces, and cells) in a mesh.
 The section describes the offset  into the vector along with the number
 of values associated with each point.
\end_layout

\begin_layout Description
dimension The topological dimension of the mesh, meaning the cell dimension.
 It can also mean the dimension of the space in which the mesh is embedded,
 but this is properly the embedding dimension.
\end_layout

\begin_layout Description
fiber
\begin_inset space \space{}
\end_inset

dimension Dimension of the space associated with the field.
 For example, the scalar field has a fiber dimension of 1 and a vector field
 has a fiber displacement equal to the dimension of the mesh.
\end_layout

\begin_layout Description
cohesive
\begin_inset space \space{}
\end_inset

cell A zero volume cell inserted between any two cells which shared a fault
 face.
 They are prisms with a fault face as the base.
\end_layout

\begin_layout Description
cone The set of entities which cover any entity in a mesh.
 For example, the cone of a triangle is its three edges.
\end_layout

\begin_layout Description
support The set of mesh entities which are covered by any entity in a mesh.
 For example, the support of a triangle is the two tetrahedra it separates.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
