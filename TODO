********* WARNING *********
This file is obsolete. The preferred TODO list is GitHub and the
PyLith development Trello page.
********* WARNING *********


======================================================================
CURRENT BUGS
======================================================================

* None

======================================================================
CURRENT ISSUES/PRIORITIES
======================================================================

* configure
  
  + Check compatibility of PyLith options with PETSc
    - HDF5
    - CUDA

* Module building

  + We want the _wrap.cxx files to work independent of PyLith and
    PETSc configure options (for example, with/without HDF5 and
    single/double precision).

* Prescribed fault with opening has zero tractions (step20) Appears to
  be a feature/artifact associated with how we implement slip with
  Lagrange multipliers.

======================================================================
KNOWN DEFICIENCIES
======================================================================

* Dirichlet BC and fault BC

  Can't use block Jacobi preconditioner when Dirichlet BC overlap with
  fault BC's, because we end up with a DOF associated with a Lagrange
  multiplier that is "free". Not sure if this is okay, when the fault
  is at an angle to the boundary.

    Might be able to fix this problem by examining constraints
    relative to orientation and if orientation coincides with
    preexisting constraint, then constrain Lagrange multiplier DOF.

  Need better error trapping when using LineParser. State of
  ifstream is insufficient. Need state of istringstream buffer, but it
  is often !good() at eof(). Test of !good() and !eof()?

* ZeroDispDB

  The default BC is ZeroDispDB which hardwires the values in a UniformDB
  to 0. No error message is generated if the user sets the values or
  data properties and they are overwritten by the hardwired values. A
  possible solution is for ZeroDispDB to use a C++ UniformDB but not
  inherit from the Python UniformDB.

* Fault orientatin in 1-D mesh

  How do we determine the orientation for a fault in a 1-D mesh? We
  assume normaldir is +1.0, but cohesive cells could be created so
  that the fault has a normaldir of -1.0. If the normaldir is -1.0,
  then we need to flip the orientation field to get the correct
  sense of slip.


----------------------------------------------------------------------
LONG TERM WISH LIST
----------------------------------------------------------------------

  Create a spatial database for the PREM model

  Use shared pointers for objects where both Python and C++ hold pointers.


----------------------------------------------------------------------
SECONDARY PRIORITIES
----------------------------------------------------------------------

* Combined kinematic and dynamic fault implementation

  FaultCohesiveKinDyn

    Add EqKinSrcs to FaultCohesiveDyn

    Use kinematic slip unless fault constitutive model suggests larger slip

----------------------------------------------------------------------
CLEANUP
----------------------------------------------------------------------

  * write cells as ints in HDF5


4. Tidy up

  Eliminate use of Inventory class.

  Create createModuleObj() methods to Python objects as standard way
  of creating handle to C++ object (not necessary in abstract base
  classes).

  Add check before calling newSection() when want to enforce at
  least 1 value.

======================================================================
MISC PRIORITIES
======================================================================

1. OutputManager
   a. VertexFilterChangeCS
      OutputFilter for writing vertex coordinates in another 
      coordinate system. Need test for whether two coordinate systems 
      are the same.

2. Coarsening for PyLith meshes

3. For Schur complement directly for mass matrix and Lagrange multiplier problem
