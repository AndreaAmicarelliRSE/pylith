# -*- Python -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This problem focuses on interseismic deformation with viscoelastic
# relaxation combined with aseismic slip. We use both Dirichlet
# boundary conditions to constrain the displacements on the lateral
# and bottom boundaries. The subducting slab uses prescribed slip with
# a constant slip rate time function.
#
# We use the same material properties as step02.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - step03.cfg (main parameter file for step03)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# To run the simulation:
# pylith step03.cfg solver_fieldsplit.cfg
#
# Output will be directed to the "output" directory..

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step03-parameters.json
problem.progress_monitor.filename = output/step03-progress.txt

# Permit unknown components so that we can override components and
# ignore warnings.
typos = strict

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation.time_step]
# Define the total time for the simulation and the time step size.
total_time = 200.0*year
dt = 10.0*year

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We constrain the DOF normal to each of the boundaries. Because the
# slab intersects the boundaries of the domain, and PyLith does not
# permit overlap between the fault interfaces and Dirichlet boundary
# conditions, for the Dirichlet boundary conditions we use the
# nodesets which exclude vertices on the fault.
#
# Array of boundary conditions (defaults to DirichletBC):
#   x_neg (ZeroDispDB to specify zero x-displacement)
#   x_pos (ZeroDispDB to specify zero x-displacement)
#   y_neg (ZeroDispDB to specify zero y-displacement)
#   y_pos (ZeroDispDB to specify zero y-displacement)
#   z_neg (ZeroDispDB to specify zero z-displacement)
bc = [x_neg, x_pos, y_neg, y_pos, z_neg]

# The label corresponds to the name of the nodeset in CUBIT.

# -x face
[pylithapp.problem.bc.x_neg]
bc_dof = [0]
label = boundary_xneg_nofault
db_initial.label = Dirichlet BC on -x

# +x face
[pylithapp.problem.bc.x_pos]
bc_dof = [0]
label = boundary_xpos
db_initial.label = Dirichlet BC on +x

# -y face
[pylithapp.problem.bc.y_neg]
bc_dof = [1]
label = boundary_yneg_nofault
db_initial.label = Dirichlet BC on -y

# +y face
[pylithapp.problem.bc.y_pos]
bc_dof = [1]
label = boundary_ypos_nofault
db_initial.label = Dirichlet BC on +y

# -z face
[pylithapp.problem.bc.z_neg]
bc_dof = [2]
label = boundary_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the slab fault patch.
interfaces = [slab_top, slab_bottom]

[pylithapp.problem.interfaces]
slab_top = pylith.faults.FaultCohesiveKin
slab_bottom = pylith.faults.FaultCohesiveKin

# Slab top -------------------------------------------------------------
[pylithapp.problem.interfaces.slab_top]
id = 100
label = fault_slabtop
edge = fault_slabtop_edge

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Use the constant slip rate time function.
eq_srcs.rupture.slip_function = pylith.faults.ConstRateSlipFn

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_top.eq_srcs.rupture.slip_function]
slip_rate = spatialdata.spatialdb.SimpleGridDB
slip_rate.label = Slab top slip rate.
slip_rate.filename = spatialdb/fault_slabtop_creep.spatialdb
slip_rate.query_type = linear

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year]

[pylithapp.problem.interfaces.slab_top.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step03-fault-slabtop.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# Slab bottom ----------------------------------------------------------
[pylithapp.problem.interfaces.slab_bottom]
id = 101
label = fault_slabbot
edge = fault_slabbot_edge
up_dir = [+0.1,0,1]

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Use the constant slip rate time function.
eq_srcs.rupture.slip_function = pylith.faults.ConstRateSlipFn

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_bottom.eq_srcs.rupture.slip_function]
slip_rate = spatialdata.spatialdb.UniformDB
slip_rate.label = Slab bottom slip rate.
slip_rate.values = [left-lateral-slip, reverse-slip, fault-opening]
slip_rate.data = [+2.0*cm/year, -4.0*cm/year, 0.0*cm/year]

slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] 

[pylithapp.problem.interfaces.slab_bottom.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step03-fault-slabbot.h5
vertex_info_fields = [normal_dir, strike_dir, dip_dir]

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# We use the same material properties as step02, with linear Maxwell
# viscoelastic models for the mantle and slab.
[pylithapp.problem.materials]
slab = pylith.materials.MaxwellIsotropic3D
mantle = pylith.materials.MaxwellIsotropic3D

[pylithapp.problem.materials.slab]
db_properties = spatialdata.spatialdb.CompositeDB
db_properties.db_A = spatialdata.spatialdb.SimpleDB
db_properties.db_B = spatialdata.spatialdb.SimpleGridDB

[pylithapp.timedependent.materials.slab.db_properties]
# Elastic properties
values_A = [density, vs, vp]
db_A.label = Elastic properties
db_A.iohandler.filename = spatialdb/mat_slab_elastic.spatialdb

# Viscoelastic properties
values_B = [viscosity]
db_B.label = Linear Maxwell viscoelatic properties
db_B.filename = spatialdb/mat_viscosity.spatialdb
db_B.query_type = linear


[pylithapp.problem.materials.mantle]
db_properties = spatialdata.spatialdb.CompositeDB
db_properties.db_A = spatialdata.spatialdb.SimpleDB
db_properties.db_B = spatialdata.spatialdb.SimpleGridDB

[pylithapp.timedependent.materials.mantle.db_properties]
# Elastic properties
values_A = [density, vs, vp]
db_A.label = Elastic properties
db_A.iohandler.filename = spatialdb/mat_mantle_elastic.spatialdb

# Viscoelastic properties
values_B = [viscosity]
db_B.label = Linear Maxwell viscoelatic properties
db_B.filename = spatialdb/mat_viscosity.spatialdb
db_B.query_type = linear


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# Domain and subdomain output ------------------------------------------
[pylithapp.problem.formulation.output.domain]
writer.filename = output/step03-domain.h5

[pylithapp.problem.formulation.output.subdomain]
writer.filename = output/step03-groundsurf.h5

# Material output ------------------------------------------------------
[pylithapp.problem.materials.slab.output]
writer.filename = output/step03-slab.h5

[pylithapp.problem.materials.wedge.output]
writer.filename = output/step03-wedge.h5

[pylithapp.problem.materials.crust.output]
writer.filename = output/step03-crust.h5

[pylithapp.problem.materials.mantle.output]
writer.filename = output/step03-mantle.h5


# End of file
