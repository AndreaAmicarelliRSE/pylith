# -*- Python -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This is an elastic quasistatic problem using Dirichlet
# (displacement) boundary conditions to generate Green's functions
# for a patch on the subduction interface. Responses are computed
# at simulated cGPS locations.
# Note that we change the default problem type from TimeDependent to
# GreensFns.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - greensfns.cfg (greensfns paramters, read by default)
#   - step07b.cfg (main parameter file for step07b)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# We use the field split preconditioner with algebraic multigrid for
# the displacement fields and the custom preconditioner for the
# Lagrange multiplier field. We use these solver settings in several
# simulations, so we put them in a separate file.
#
# To run the simulation:
# pylith step07b.cfg solver_fieldsplit.cfg --problem=pylith.problems.GreensFns
#
# Output will be directed to the "output" directory..

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step07b-parameters.json
problem.progress_monitor.filename = output/step07b-progress.txt

# Permit uknown components so that we can override components and
# ignore warnings.
typos = strict

# ----------------------------------------------------------------------
# Problem.
# ----------------------------------------------------------------------
[pylithapp.problem.formulation]
output = [cgps_sites]
output.cgps_sites = pylith.meshio.OutputSolnPoints

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We constrain the DOF normal to each of the boundaries.
#
# Array of boundary conditions (defaults to DirichletBC):
#   x_neg (ZeroDispDB to specify zero x-displacement)
#   x_pos (ZeroDispDB to specify zero x-displacement)
#   y_neg (ZeroDispDB to specify zero y-displacement)
#   y_pos (ZeroDispDB to specify zero y-displacement)
#   z_neg (ZeroDispDB to specify zero z-displacement)
bc = [x_neg, x_pos, y_neg, y_pos, z_neg]

# The label corresponds to the name of the nodeset in CUBIT.

# -x face
[pylithapp.problem.bc.x_neg]
bc_dof = [0]
label = boundary_xneg
db_initial.label = Dirichlet BC on -x

# +x face
[pylithapp.problem.bc.x_pos]
bc_dof = [0]
label = boundary_xpos
db_initial.label = Dirichlet BC on +x

# -y face
[pylithapp.problem.bc.y_neg]
bc_dof = [1]
label = boundary_yneg
db_initial.label = Dirichlet BC on -y

# +y face
[pylithapp.problem.bc.y_pos]
bc_dof = [1]
label = boundary_ypos
db_initial.label = Dirichlet BC on +y

# -z face
[pylithapp.problem.bc.z_neg]
bc_dof = [2]
label = boundary_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the slab fault patch.
interfaces = [slab]

[pylithapp.problem.interfaces]
slab = pylith.faults.FaultCohesiveImpulses

[pylithapp.problem.interfaces.slab]
id = 100
label = fault_slabtop_patch
edge = fault_slabtop_patch_edge

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Label and query type for fault slip.
db_impulse_amplitude.label = Amplitude of fault slip impulses
db_impulse_amplitude.query_type = nearest

# Spatialdb for impulses.
impulse_dof = [0]
db_impulse_amplitude.iohandler.filename = spatialdb/impulse_amplitude.spatialdb


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# We keep the default elastic materials for this problem, so no changes
# are necessary.

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# cGPS sites output ---------------------------------
[pylithapp.problem.formulation.output.cgps_sites]
coordsys = spatialdata.geocoords.CSGeo
coordsys.space_dim = 3
coordsys.datum_horiz = WGS84
coordsys.datum_vert = mean sea level
writer = pylith.meshio.DataWriterHDF5
reader.filename = cgps_sites.txt

writer.filename = output/step07b-cgps_sites.h5

# Fault output ------------------------------------------------------
[pylithapp.problem.interfaces.slab.output]
vertex_info_fields = [normal_dir, strike_dir, dip_dir, impulse_amplitude]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step07b-fault-slab.h5

# Material output ------------------------------------------------------
[pylithapp.problem.materials.slab.output]
writer.filename = output/step07b-slab.h5

[pylithapp.problem.materials.wedge.output]
writer.filename = output/step07b-wedge.h5

[pylithapp.problem.materials.crust.output]
writer.filename = output/step07b-crust.h5

[pylithapp.problem.materials.mantle.output]
writer.filename = output/step07b-mantle.h5


# End of file
