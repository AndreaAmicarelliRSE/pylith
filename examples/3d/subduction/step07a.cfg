# -*- Python -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This is an elastic quasistatic problem using Dirichlet
# (displacement) boundary conditions and prescribed fault slip to
# simulate a coseismic event on the subductin interface.  Fault slip
# is specified with a spatialdb to provide an approximately Gaussian
# slip distribution. This problem is used to generate synthetic
# data at cGPS locations.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - step07a.cfg (main parameter file for step07a)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# We use the field split preconditioner with algebraic multigrid for
# the displacement fields and the custom preconditioner for the
# Lagrange multiplier field. We use these solver settings in several
# simulations, so we put them in a separate file.
#
# To run the simulation:
# pylith step07a.cfg solver_fieldsplit.cfg
#
# Output will be directed to the "output" directory..

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step07a-parameters.json
problem.progress_monitor.filename = output/step07a-progress.txt

# Permit uknown components so that we can override components and
# ignore warnings.
typos = strict

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation.time_step]
# This is a static problem so there is only a single time step.
total_time = 0.0*year

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# For this problem, we want output over the entire domain, for the
# ground surface, and at simulated cGPS locations.
[pylithapp.problem.implicit]
output = [domain, subdomain, cgps_sites]

# Default output is for the entire domain.
# We need to set the type of output for the subdomain and points.
output.subdomain = pylith.meshio.OutputSolnSubset
output.cgps_sites = pylith.meshio.OutputSolnPoints

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We constrain the DOF normal to each of the boundaries.
#
# Array of boundary conditions (defaults to DirichletBC):
#   x_neg (ZeroDispDB to specify zero x-displacement)
#   x_pos (ZeroDispDB to specify zero x-displacement)
#   y_neg (ZeroDispDB to specify zero y-displacement)
#   y_pos (ZeroDispDB to specify zero y-displacement)
#   z_neg (ZeroDispDB to specify zero z-displacement)
bc = [x_neg, x_pos, y_neg, y_pos, z_neg]

# The label corresponds to the name of the nodeset in CUBIT.

# -x face
[pylithapp.problem.bc.x_neg]
bc_dof = [0]
label = boundary_xneg
db_initial.label = Dirichlet BC on -x

# +x face
[pylithapp.problem.bc.x_pos]
bc_dof = [0]
label = boundary_xpos
db_initial.label = Dirichlet BC on +x

# -y face
[pylithapp.problem.bc.y_neg]
bc_dof = [1]
label = boundary_yneg
db_initial.label = Dirichlet BC on -y

# +y face
[pylithapp.problem.bc.y_pos]
bc_dof = [1]
label = boundary_ypos
db_initial.label = Dirichlet BC on +y

# -z face
[pylithapp.problem.bc.z_neg]
bc_dof = [2]
label = boundary_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the slab fault patch.
interfaces = [slab]

[pylithapp.problem.interfaces]
slab = pylith.faults.FaultCohesiveKin

[pylithapp.problem.interfaces.slab]
label = fault_slabtop_patch
edge = fault_slabtop_patch_edge

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# We use the default step-function slip time function.
[pylithapp.problem.interfaces.slab.eq_srcs.rupture]

# The slip is defined in a SimpleGridDB spatial database.
[pylithapp.problem.interfaces.slab.eq_srcs.rupture.slip_function]
slip = spatialdata.spatialdb.SimpleGridDB
slip.label = Gaussian slip distribution for earthquake
slip.filename = spatialdb/coseismic_slab_slip.spatialdb

# Use linear interpolation.
slip.query_type = linear

# We use a UniformDB to specify the slip initiation time.
slip_time = spatialdata.spatialdb.UniformDB
slip_time.label  = Slip initiation time
slip_time.values = [slip-time]
slip_time.data = [0.0*year] 

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# We keep the default elastic materials for this problem, so no changes
# are necessary.

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# Domain, subdomain, and points output ---------------------------------
[pylithapp.problem.formulation.output.domain]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step07a-domain.h5

[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for top surface.
label = boundary_zpos
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step07a-groundsurf.h5

# Specify output type, coordinate system, and station file for cgps_sites.
[pylithapp.problem.formulation.output.cgps_sites]
# We will use a geographic coordinate system for the cGPS sites file.
coordsys = spatialdata.geocoords.CSGeo
coordsys.space_dim = 3
coordsys.datum_horiz = WGS84
coordsys.datum_vert = mean sea level

# Use HDF5 output.
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step07a-cgps_sites.h5

# Simulated cGPS station file.
reader.filename = cgps_sites.txt

# Fault output ------------------------------------------------------
[pylithapp.problem.interfaces.slab.output]
# Output fault results to HDF5 file.
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step07a-fault-slab.h5

# We want both orientation and slip information in the information file.
vertex_info_fields = [normal_dir, strike_dir, dip_dir, final_slip_rupture]

# Material output ------------------------------------------------------
[pylithapp.problem.materials.slab.output]
writer.filename = output/step07a-slab.h5

[pylithapp.problem.materials.wedge.output]
writer.filename = output/step07a-wedge.h5

[pylithapp.problem.materials.crust.output]
writer.filename = output/step07a-crust.h5

[pylithapp.problem.materials.mantle.output]
writer.filename = output/step07a-mantle.h5


# End of file
